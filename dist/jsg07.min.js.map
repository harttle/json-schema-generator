{"version":3,"file":"jsg07.min.js","sources":["../src/index.js"],"sourcesContent":["export const specFor = {\n    'object': function (data, {$id, title}) {\n        let keys = Object.keys(data);\n        let schema = {\n            title: title || 'An object value',\n            required: keys,\n            properties: {}\n        };\n        keys.forEach(key => {\n            schema.properties[key] = spec(data[key], {$id: `${$id}/properties/${key}`});\n        });\n        return schema;\n    },\n    'array': function (data, {$id}) {\n        let schema = {\n            title: 'An array of items'\n        };\n        if (data.length) {\n            schema.items = spec(data[0], {$id: `${$id}/items`});\n        }\n        return schema;\n    },\n    'boolean': function (data) {\n        return {\n            title: 'A boolean value',\n            default: false,\n            examples: [data]\n        };\n    },\n    'integer': function (data) {\n        return {\n            title: 'An integer value',\n            default: 0,\n            examples: [data]\n        };\n    },\n    'string': function (data) {\n        return {\n            title: 'A string value',\n            default: '',\n            pattern: '^(.*)$',\n            examples: [data]\n        };\n    }\n};\n\nexport function infer (data, options = {}) {\n    let schema = spec(data, {$id: '#', title: options.title});\n    schema.definitions = {};\n    schema.$schema = options.$schema || 'http://json-schema.org/draft-07/schema#';\n    schema.$id = options.$id || 'http://example.org/root.json#';\n    return schema;\n}\n\nexport function spec (data, options = {}) {\n    let type = typeOf(data);\n    let impl = specFor[type];\n    let $id = options.$id;\n    if (!impl) throw new Error(`implementation for ${type} not found`);\n    return Object.assign(impl(data, options), {$id, type});\n}\n\nexport function typeOf (obj) {\n    if (obj instanceof Array) return 'array';\n    if (typeof obj === 'string' || obj instanceof String) return 'string';\n    if (Number.isInteger(obj)) return 'integer';\n    return typeof obj;\n}\n"],"names":["specFor","data","$id","title","keys","Object","schema","forEach","properties","key","spec","length","items","options","type","typeOf","impl","Error","assign","obj","Array","String","Number","isInteger","definitions","$schema"],"mappings":"wYAAaA,EAAU,QACT,SAAUC,SAAOC,IAAAA,IAAKC,IAAAA,MACxBC,EAAOC,OAAOD,KAAKH,GACnBK,EAAS,OACFH,GAAS,2BACNC,aACE,aAEXG,QAAQ,cACFC,WAAWC,GAAOC,EAAKT,EAAKQ,GAAM,CAACP,IAAQA,iBAAkBO,MAEjEH,SAEF,SAAUL,SAAOC,IAAAA,IAClBI,EAAS,OACF,4BAEPL,EAAKU,WACEC,MAAQF,EAAKT,EAAK,GAAI,CAACC,IAAQA,cAEnCI,WAEA,SAAUL,SACV,OACI,2BACE,WACC,CAACA,aAGR,SAAUA,SACV,OACI,2BACE,WACC,CAACA,YAGT,SAAUA,SACT,OACI,yBACE,WACA,kBACC,CAACA,MAahB,SAASS,EAAMT,OAAMY,yDAAU,GAC9BC,EAAOC,EAAOd,GACde,EAAOhB,EAAQc,GACfZ,EAAMW,EAAQX,QACbc,EAAM,MAAM,IAAIC,4BAA4BH,uBAC1CT,OAAOa,OAAOF,EAAKf,EAAMY,GAAU,CAACX,MAAKY,SAG7C,SAASC,EAAQI,UAChBA,aAAeC,MAAc,QACd,iBAARD,GAAoBA,aAAeE,OAAe,SACzDC,OAAOC,UAAUJ,GAAa,mBACpBA,gBAAAA,uBApBX,SAAgBlB,OAAMY,yDAAU,GAC/BP,EAASI,EAAKT,EAAM,CAACC,IAAK,IAAKC,MAAOU,EAAQV,iBAC3CqB,YAAc,KACdC,QAAUZ,EAAQY,SAAW,4CAC7BvB,IAAMW,EAAQX,KAAO,gCACrBI"}