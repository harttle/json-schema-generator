{"version":3,"file":"jsg07.js","sources":["../src/index.js"],"sourcesContent":["export const specFor = {\n    'object': function (data, {$id, title}) {\n        let keys = Object.keys(data);\n        let schema = {\n            title: title || 'An object value',\n            required: keys,\n            properties: {}\n        };\n        keys.forEach(key => {\n            schema.properties[key] = spec(data[key], {$id: `${$id}/properties/${key}`});\n        });\n        return schema;\n    },\n    'array': function (data, {$id}) {\n        let schema = {\n            title: 'An array of items'\n        };\n        if (data.length) {\n            schema.items = spec(data[0], {$id: `${$id}/items`});\n        }\n        return schema;\n    },\n    'boolean': function (data) {\n        return {\n            title: 'A boolean value',\n            default: false,\n            examples: [data]\n        };\n    },\n    'integer': function (data) {\n        return {\n            title: 'An integer value',\n            default: 0,\n            examples: [data]\n        };\n    },\n    'string': function (data) {\n        return {\n            title: 'A string value',\n            default: '',\n            pattern: '^(.*)$',\n            examples: [data]\n        };\n    }\n};\n\nexport function infer (data, options = {}) {\n    let schema = spec(data, {$id: '#', title: options.title});\n    schema.definitions = {};\n    schema.$schema = options.$schema || 'http://json-schema.org/draft-07/schema#';\n    schema.$id = options.$id || 'http://example.org/root.json#';\n    return schema;\n}\n\nexport function spec (data, options = {}) {\n    let type = typeOf(data);\n    let impl = specFor[type];\n    let $id = options.$id;\n    if (!impl) throw new Error(`implementation for ${type} not found`);\n    return Object.assign(impl(data, options), {$id, type});\n}\n\nexport function typeOf (obj) {\n    if (obj instanceof Array) return 'array';\n    if (typeof obj === 'string' || obj instanceof String) return 'string';\n    if (Number.isInteger(obj)) return 'integer';\n    return typeof obj;\n}\n"],"names":["specFor","data","$id","title","keys","Object","schema","required","properties","forEach","key","spec","length","items","default","examples","pattern","infer","options","definitions","$schema","type","typeOf","impl","Error","assign","obj","Array","String","Number","isInteger"],"mappings":";;;;;;;;;;;;;;;;;MAAaA,UAAU;EACnB,cAAU,gBAAUC,IAAV,QAA8B;EAAA,YAAbC,GAAa,QAAbA,GAAa;EAAA,YAARC,KAAQ,QAARA,KAAQ;;EACpC,YAAIC,OAAOC,OAAOD,IAAP,CAAYH,IAAZ,CAAX;EACA,YAAIK,SAAS;EACTH,mBAAOA,SAAS,iBADP;EAETI,sBAAUH,IAFD;EAGTI,wBAAY;EAHH,SAAb;EAKAJ,aAAKK,OAAL,CAAa,eAAO;EAChBH,mBAAOE,UAAP,CAAkBE,GAAlB,IAAyBC,KAAKV,KAAKS,GAAL,CAAL,EAAgB,EAACR,KAAQA,GAAR,oBAA0BQ,GAA3B,EAAhB,CAAzB;EACH,SAFD;EAGA,eAAOJ,MAAP;EACH,KAZkB;EAanB,aAAS,eAAUL,IAAV,SAAuB;EAAA,YAANC,GAAM,SAANA,GAAM;;EAC5B,YAAII,SAAS;EACTH,mBAAO;EADE,SAAb;EAGA,YAAIF,KAAKW,MAAT,EAAiB;EACbN,mBAAOO,KAAP,GAAeF,KAAKV,KAAK,CAAL,CAAL,EAAc,EAACC,KAAQA,GAAR,WAAD,EAAd,CAAf;EACH;EACD,eAAOI,MAAP;EACH,KArBkB;EAsBnB,eAAW,iBAAUL,IAAV,EAAgB;EACvB,eAAO;EACHE,mBAAO,iBADJ;EAEHW,qBAAS,KAFN;EAGHC,sBAAU,CAACd,IAAD;EAHP,SAAP;EAKH,KA5BkB;EA6BnB,eAAW,iBAAUA,IAAV,EAAgB;EACvB,eAAO;EACHE,mBAAO,kBADJ;EAEHW,qBAAS,CAFN;EAGHC,sBAAU,CAACd,IAAD;EAHP,SAAP;EAKH,KAnCkB;EAoCnB,cAAU,gBAAUA,IAAV,EAAgB;EACtB,eAAO;EACHE,mBAAO,gBADJ;EAEHW,qBAAS,EAFN;EAGHE,qBAAS,QAHN;EAIHD,sBAAU,CAACd,IAAD;EAJP,SAAP;EAMH;EA3CkB,CAAhB;;AA8CP,EAAO,SAASgB,KAAT,CAAgBhB,IAAhB,EAAoC;EAAA,QAAdiB,OAAc,uEAAJ,EAAI;;EACvC,QAAIZ,SAASK,KAAKV,IAAL,EAAW,EAACC,KAAK,GAAN,EAAWC,OAAOe,QAAQf,KAA1B,EAAX,CAAb;EACAG,WAAOa,WAAP,GAAqB,EAArB;EACAb,WAAOc,OAAP,GAAiBF,QAAQE,OAAR,IAAmB,yCAApC;EACAd,WAAOJ,GAAP,GAAagB,QAAQhB,GAAR,IAAe,+BAA5B;EACA,WAAOI,MAAP;EACH;;AAED,EAAO,SAASK,IAAT,CAAeV,IAAf,EAAmC;EAAA,QAAdiB,OAAc,uEAAJ,EAAI;;EACtC,QAAIG,OAAOC,OAAOrB,IAAP,CAAX;EACA,QAAIsB,OAAOvB,QAAQqB,IAAR,CAAX;EACA,QAAInB,MAAMgB,QAAQhB,GAAlB;EACA,QAAI,CAACqB,IAAL,EAAW,MAAM,IAAIC,KAAJ,yBAAgCH,IAAhC,gBAAN;EACX,WAAOhB,OAAOoB,MAAP,CAAcF,KAAKtB,IAAL,EAAWiB,OAAX,CAAd,EAAmC,EAAChB,QAAD,EAAMmB,UAAN,EAAnC,CAAP;EACH;;AAED,EAAO,SAASC,MAAT,CAAiBI,GAAjB,EAAsB;EACzB,QAAIA,eAAeC,KAAnB,EAA0B,OAAO,OAAP;EAC1B,QAAI,OAAOD,GAAP,KAAe,QAAf,IAA2BA,eAAeE,MAA9C,EAAsD,OAAO,QAAP;EACtD,QAAIC,OAAOC,SAAP,CAAiBJ,GAAjB,CAAJ,EAA2B,OAAO,SAAP;EAC3B,kBAAcA,GAAd,yCAAcA,GAAd;EACH;;;;;;;;;;;;;;;"}