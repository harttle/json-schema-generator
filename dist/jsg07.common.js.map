{"version":3,"file":"jsg07.common.js","sources":["../src/index.js"],"sourcesContent":["export const specFor = {\n    'object': function (data, {$id, title}) {\n        let keys = Object.keys(data);\n        let schema = {\n            title: title || 'An object value',\n            required: keys,\n            properties: {}\n        };\n        keys.forEach(key => {\n            schema.properties[key] = spec(data[key], {$id: `${$id}/properties/${key}`});\n        });\n        return schema;\n    },\n    'array': function (data, {$id}) {\n        let schema = {\n            title: 'An array of items'\n        };\n        if (data.length) {\n            schema.items = spec(data[0], {$id: `${$id}/items`});\n        }\n        return schema;\n    },\n    'boolean': function (data) {\n        return {\n            title: 'A boolean value',\n            default: false,\n            examples: [data]\n        };\n    },\n    'integer': function (data) {\n        return {\n            title: 'An integer value',\n            default: 0,\n            examples: [data]\n        };\n    },\n    'string': function (data) {\n        return {\n            title: 'A string value',\n            default: '',\n            pattern: '^(.*)$',\n            examples: [data]\n        };\n    }\n};\n\nexport function infer (data, options = {}) {\n    let schema = spec(data, {$id: '#', title: options.title});\n    schema.definitions = {};\n    schema.$schema = options.$schema || 'http://json-schema.org/draft-07/schema#';\n    schema.$id = options.$id || 'http://example.org/root.json#';\n    return schema;\n}\n\nexport function spec (data, options = {}) {\n    let type = typeOf(data);\n    let impl = specFor[type];\n    let $id = options.$id;\n    if (!impl) throw new Error(`implementation for ${type} not found`);\n    return Object.assign(impl(data, options), {$id, type});\n}\n\nexport function typeOf (obj) {\n    if (obj instanceof Array) return 'array';\n    if (typeof obj === 'string' || obj instanceof String) return 'string';\n    if (Number.isInteger(obj)) return 'integer';\n    return typeof obj;\n}\n"],"names":["specFor","data","$id","title","keys","Object","schema","forEach","properties","key","spec","length","items","infer","options","definitions","$schema","type","typeOf","impl","Error","assign","obj","Array","String","Number","isInteger"],"mappings":";;;;;;;;;;;;;;;IAAaA,UAAU;cACT,gBAAUC,IAAV,QAA8B;YAAbC,GAAa,QAAbA,GAAa;YAARC,KAAQ,QAARA,KAAQ;;YAChCC,OAAOC,OAAOD,IAAP,CAAYH,IAAZ,CAAX;YACIK,SAAS;mBACFH,SAAS,iBADP;sBAECC,IAFD;wBAGG;SAHhB;aAKKG,OAAL,CAAa,eAAO;mBACTC,UAAP,CAAkBC,GAAlB,IAAyBC,KAAKT,KAAKQ,GAAL,CAAL,EAAgB,EAACP,KAAQA,GAAR,oBAA0BO,GAA3B,EAAhB,CAAzB;SADJ;eAGOH,MAAP;KAXe;aAaV,eAAUL,IAAV,SAAuB;YAANC,GAAM,SAANA,GAAM;;YACxBI,SAAS;mBACF;SADX;YAGIL,KAAKU,MAAT,EAAiB;mBACNC,KAAP,GAAeF,KAAKT,KAAK,CAAL,CAAL,EAAc,EAACC,KAAQA,GAAR,WAAD,EAAd,CAAf;;eAEGI,MAAP;KApBe;eAsBR,iBAAUL,IAAV,EAAgB;eAChB;mBACI,iBADJ;qBAEM,KAFN;sBAGO,CAACA,IAAD;SAHd;KAvBe;eA6BR,iBAAUA,IAAV,EAAgB;eAChB;mBACI,kBADJ;qBAEM,CAFN;sBAGO,CAACA,IAAD;SAHd;KA9Be;cAoCT,gBAAUA,IAAV,EAAgB;eACf;mBACI,gBADJ;qBAEM,EAFN;qBAGM,QAHN;sBAIO,CAACA,IAAD;SAJd;;CArCD;;AA8CP,AAAO,SAASY,KAAT,CAAgBZ,IAAhB,EAAoC;QAAda,OAAc,uEAAJ,EAAI;;QACnCR,SAASI,KAAKT,IAAL,EAAW,EAACC,KAAK,GAAN,EAAWC,OAAOW,QAAQX,KAA1B,EAAX,CAAb;WACOY,WAAP,GAAqB,EAArB;WACOC,OAAP,GAAiBF,QAAQE,OAAR,IAAmB,yCAApC;WACOd,GAAP,GAAaY,QAAQZ,GAAR,IAAe,+BAA5B;WACOI,MAAP;;;AAGJ,AAAO,SAASI,IAAT,CAAeT,IAAf,EAAmC;QAAda,OAAc,uEAAJ,EAAI;;QAClCG,OAAOC,OAAOjB,IAAP,CAAX;QACIkB,OAAOnB,QAAQiB,IAAR,CAAX;QACIf,MAAMY,QAAQZ,GAAlB;QACI,CAACiB,IAAL,EAAW,MAAM,IAAIC,KAAJ,yBAAgCH,IAAhC,gBAAN;WACJZ,OAAOgB,MAAP,CAAcF,KAAKlB,IAAL,EAAWa,OAAX,CAAd,EAAmC,EAACZ,QAAD,EAAMe,UAAN,EAAnC,CAAP;;;AAGJ,AAAO,SAASC,MAAT,CAAiBI,GAAjB,EAAsB;QACrBA,eAAeC,KAAnB,EAA0B,OAAO,OAAP;QACtB,OAAOD,GAAP,KAAe,QAAf,IAA2BA,eAAeE,MAA9C,EAAsD,OAAO,QAAP;QAClDC,OAAOC,SAAP,CAAiBJ,GAAjB,CAAJ,EAA2B,OAAO,SAAP;kBACbA,GAAd,yCAAcA,GAAd;;;;;;;;"}